--Imperative programming
do begin
  declare l_str int default 1;
  declare l_end int default 10;
  declare l_sum int default 0;
  declare l_indx int;
  for l_indx in l_str..l_end do
    l_sum = :l_sum + 10;
  end for;
  select :l_sum from dummy;
end;       
******************************************************************************************
--EXIT HANDLER FOR SQLEXCEPTION
***************************************************************************************
CREATE PROCEDURE get_assignee_status
       (IN  iv_id INT,
        OUT ov_assignee INT,
        OUT ov_status INT  )
AS BEGIN
--Up to HANA 2.0 SPS 03:
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
        ov_assignee = -1;
        ov_status     = -1;
     END;
SELECT assignee,
         status
  INTO ov_assignee ,
        ov_status
  DEFAULT -1,    --From HANA 2.0 SPS 03: Defaultdvalues
          -1     --for variables at the assignment
  FROM tasks
  WHERE id = iv_id;
END;
CALL get_assignee_status(1, ?, ?);
CALL get_assignee_status(-1, ?, ?);
******************************************************
--Index access in local table 
***********************************************************

DO (OUT ot_result TABLE( matnr nvarchar(40),
                         maktx NVARCHAR(40))=>?)
BEGIN
   ot_result = SELECT top 10  matnr, maktx FROM saphanadb.makt;
   ot_result.maktx[1] = 'Title: ' || :ot_result.maktx[1];
END;
*********************************************
--Append operation in local tables
********************************************

DO (OUT rt_result TABLE( id INT,
                         text1 NVARCHAR(50),
                         text2 NVARCHAR(50))=>? )
BEGIN
   DECLARE lv_index INT;
FOR lv_index IN 1..5
   DO
-- Inserting all columns at position 1
      :rt_result.INSERT((lv_index,
                         'Insert '||lv_index, '')
                         , 1);
   END FOR;
FOR lv_index IN 1..5
   DO
-- Append to the table, only for two columns
      :rt_result.(id, text2).INSERT((lv_index,
                                     'Append '||lv_index));
   END FOR;
END;
*********************************************************
--Appending tables
**********************************************************
DO (OUT rt_result TABLE( id INT,
                         text1 NVARCHAR(50),
                         text2 NVARCHAR(50))=>? )
BEGIN
   DECLARE lv_index INT;
FOR lv_index IN 1..5
   DO
-- Inserting all columns at position 1
      :rt_result.INSERT((lv_index,
                         'Insert '||lv_index, '')
                         , 1);
   END FOR;
FOR lv_index IN 1..5
   DO
-- Append to the table, only for two columns
      :rt_result.(id, text2).INSERT((lv_index,
                                     'Append '||lv_index));
   END FOR;
END;
***************************************************
--Apendng table variables like append lines in aBAP
************************************************
do ( out ot_result table( id int,
                          text1 nvarchar(50),
                          text2 nvarchar(50))=>? )
                          begin
   declare l_indx int;
   declare lt_tmp table (col1 int,
                          col2 nvarchar(50) );
  --Build lt_tmp                        
        :lt_tmp.insert((1, 'Hari' ));
        :lt_tmp.insert((2, 'Chaitanya'));
                           
--Build out table result
 :ot_result.insert((1, 'First Record', 'A'));
  :ot_result.insert((2, 'second Record', 'B'));
   :ot_result.insert((3, 'Third Record', 'C'));
 --Append lines of table in ABAP, but with different structures
 :ot_result.(id, text1).insert( :lt_tmp, 2 );
end;
--*******************************************************
--Insert lines using UPDATE statement
--*******************************************************
--//Update
do ( out ot_res table( text nvarchar(40) )=>? )
begin
 DECLARE indx integer;
:ot_res.insert(('Insert 1'), 1);
:ot_res.insert(('Insert 2'), 2);
:ot_res.insert(('Insert 3'), 3);
--UPDATE lines 2 and 4
:ot_res.update(('Update1'),2);
:ot_res.update(('update4'),4);
--Skip for index 5 which will be filled with null values
ot_res[6] = ('insert 6');  --Another way of appending
end;

--*******************************************************
--Insert lines using UPDATE statement
--:<tablevariable>[.<columnlist>].UPDATE((<valuelist>),
    --                                         <position>);
--///Alternatively, a syntax variant similar to index-based access can also be followed:
--<tablevariable>[.<columnlist>].[<position>] = (<valuelist>);

--*******************************************************
--//Update
do ( out ot_res table( text nvarchar(40) )=>? )
begin
 DECLARE indx integer;
:ot_res.insert(('Insert 1'), 1);
:ot_res.insert(('Insert 2'), 2);
:ot_res.insert(('Insert 3'), 3);
--UPDATE lines 2 and 4
:ot_res.update(('Update1'),2);
:ot_res.update(('update4'),4);
--Skip for index 5 which will be filled with null values
ot_res[6] = ('insert 6');  --Another way of appending
end;


--*******************************************************
--Delete statement in SQL script
-- <tablevariable>.DELETE([<rows>]);
--********************************************************

DO (OUT ot_result TABLE(text NVARCHAR(100))=>?)
BEGIN
   DECLARE lv_index INT;
   DECLARE lv_del INT ARRAY = ARRAY(1, 3);
-- Build a table with the rows 1 t0 10
   FOR lv_index IN 1..10 DO
      :ot_result.INSERT(('Line '||lv_index), lv_index);
   END FOR;
-- Deletion of the line at index 9
   :ot_result.DELETE(9);
-- Deletion of the lines 5 to 7
   :ot_result.DELETE(5..7);
-- Deletion of the lines from the array LV_DEL
   :ot_result.DELETE(:lv_del);
END;                          

--*******************************************************
--Search operator in SQL script
-- :<tablevariable>.SEARCH((<columnlist>),
 --                         (<valuelist>),
    --                     [<startindex>]);
--Returns the index of the serching values 
--********************************************************
--859966 searching for user in both columns ernam and aenam
do( out ot_res table( matnr nvarchar(40), 
               ernam nvarchar(12),
               aenam nvarchar(12))=>?)
   begin
    declare l_idx int = 0;           
               
    ot_res = select matnr, ernam, aenam from mara_copy where
                  ernam = '859966';
  l_idx = :ot_res.search( (ernam, aenam), (859966, 859966) );
   
  :ot_res.delete(l_idx);
   
   :ot_res.delete(:ot_res.search((ernam,aenam), (859966,859966)));
                      
               end;
